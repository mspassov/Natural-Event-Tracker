{"version":3,"sources":["components/LocationMarker.js","components/InfoBox.js","components/Map.js","loading.gif","components/Loader.js","components/Header.js","nasaLogo.png","mapsLogo.png","components/Explanation.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","eventType","onClick","iconType","iconStyling","fireIcon","flashIcon","volcanoIcon","snowflakeIcon","className","icon","InfoBox","info","id","title","document","querySelector","style","display","Map","eventData","centerPoint","zoomLevel","useState","locationInfo","setLocationInfo","handleClick","box","markers","map","curr","categories","geometries","coordinates","console","log","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","Explanation","nasaLogo","mapsLogo","App","setEventData","loadingState","setLoadingState","useEffect","a","fetch","results","json","events","fetchData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.802d54c4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Icon } from '@iconify/react'\r\nimport fireIcon from '@iconify/icons-mdi/fire'\r\nimport flashIcon from '@iconify/icons-mdi/flash-alert-outline';\r\nimport volcanoIcon from '@iconify-icons/emojione/volcano';\r\nimport snowflakeIcon from '@iconify/icons-mdi/snowflake';\r\n\r\n\r\nconst LocationMarker = ({lat, lng, eventType, onClick}) => {\r\n\r\n    let iconType = null;\r\n    let iconStyling = '';\r\n    if(eventType === 'wildfire'){\r\n        iconType = fireIcon;\r\n        iconStyling = 'wildfire-icon';\r\n    }\r\n    else if(eventType === 'storm'){\r\n        iconType = flashIcon;\r\n        iconStyling = 'storm-icon';\r\n    }\r\n    else if(eventType === 'volcano'){\r\n        iconType = volcanoIcon;\r\n        iconStyling = 'volcano-icon';\r\n    }\r\n    else if(eventType === 'ice'){\r\n        iconType = snowflakeIcon;\r\n        iconStyling = 'ice-icon';\r\n    }   \r\n\r\n    return (\r\n        <div className='location-marker' onClick={onClick}>\r\n            <Icon icon={iconType} className={iconStyling} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMarker\r\n","import React from 'react'\r\n\r\nconst InfoBox = ({info}) => {\r\n\r\n    const handleClose = () =>{\r\n        let box = document.querySelector('.location-info');\r\n        box.style.display = 'none';\r\n    }\r\n\r\n    return (\r\n        <div className='location-info'>\r\n            <h2>Event Information</h2>\r\n            <ul>\r\n                <li>ID: <strong>{info.id}</strong></li>\r\n                <li>TITLE: <strong>{info.title}</strong></li>\r\n            </ul>\r\n            <button onClick={handleClose}>Close</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React, {useState} from 'react'\r\nimport GoogleMapReact from 'google-map-react'\r\nimport LocationMarker from './LocationMarker'\r\nimport InfoBox from './InfoBox'\r\n\r\nconst Map = ({eventData, centerPoint, zoomLevel}) => {\r\n\r\n    const[locationInfo, setLocationInfo] = useState(null)\r\n\r\n    const handleClick = (id, title) =>{\r\n        setLocationInfo({id: id, title: title});\r\n        let box = document.querySelector('.location-info');\r\n        if(box != null){\r\n            box.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    const markers = eventData.map((curr) =>{\r\n        if(curr.categories[0].id === 8){    //wildfire\r\n            const lat = curr.geometries[0].coordinates[1];\r\n            const lng = curr.geometries[0].coordinates[0];\r\n            return <LocationMarker eventType='wildfire' lat={lat} lng={lng} onClick={() => handleClick(curr.id, curr.title )}/>\r\n        }\r\n        if(curr.categories[0].id === 10){   //severe storm \r\n            const lat = curr.geometries[0].coordinates[1];\r\n            const lng = curr.geometries[0].coordinates[0];\r\n            return <LocationMarker eventType='storm' lat={lat} lng={lng} onClick={() => handleClick(curr.id, curr.title )}/>\r\n        }\r\n        if(curr.categories[0].id === 12){   //volcano\r\n            const lat = curr.geometries[0].coordinates[1];\r\n            const lng = curr.geometries[0].coordinates[0];\r\n            console.log(lat, lng);\r\n            if(typeof lat == 'number' && typeof lng == 'number'){\r\n                return <LocationMarker eventType='volcano' lat={lat} lng={lng} onClick={() => handleClick(curr.id, curr.title )}/>\r\n            }  \r\n        }\r\n        if(curr.categories[0].id === 15){   //sea and lake ice \r\n            const lat = curr.geometries[0].coordinates[1];\r\n            const lng = curr.geometries[0].coordinates[0];\r\n            return <LocationMarker eventType='ice' lat={lat} lng={lng} onClick={() => handleClick(curr.id, curr.title )}/>\r\n        }\r\n        \r\n    })\r\n\r\n    return (\r\n        <div className='map'>            \r\n            <GoogleMapReact \r\n                bootstrapURLKeys={{key: 'AIzaSyDbUunRVN0L2Z_Co5wxkIfuYYln7IMeFz0'}}\r\n                defaultCenter={centerPoint}\r\n                defaultZoom={zoomLevel}\r\n            >\r\n                {markers}\r\n            </GoogleMapReact>\r\n            {locationInfo && <InfoBox info={locationInfo}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nMap.defaultProps = {\r\n    centerPoint:{\r\n        lat: 0,\r\n        lng: 0\r\n    },\r\n    zoomLevel: 1\r\n}\r\n\r\nexport default Map\r\n","export default __webpack_public_path__ + \"static/media/loading.1cbc65b1.gif\";","import React from 'react'\r\nimport spinner from '../loading.gif'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className='loader'>\r\n            <img src={spinner} alt=\"loading\" />\r\n            <h1>Loading Event Details </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <p className=\"title\">Natural Events Tracker (Powered by NASA)</p>\r\n            <p>Click on any event to get details!</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","export default __webpack_public_path__ + \"static/media/nasaLogo.e70ecb87.png\";","export default __webpack_public_path__ + \"static/media/mapsLogo.b8d2ff31.png\";","import React from 'react'\r\nimport nasaLogo from '../nasaLogo.png'\r\nimport mapsLogo from '../mapsLogo.png'\r\n\r\nconst Explanation = () => {\r\n    return (\r\n        <section className='explanation'>\r\n            <h1>Tools Used:</h1>\r\n            <img src={nasaLogo} alt=\"\" className='nasaLogo' />\r\n            <h3>NASA Web API for Natural Events Tracking</h3>\r\n            <br /><br />\r\n            <img src={mapsLogo} alt=\"\" className='mapsLogo' />\r\n            <h3>Google Maps API</h3>\r\n            <br /><br />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Explanation\r\n","import React, {useState, useEffect} from 'react'\nimport Map from './components/Map'\nimport Loader from './components/Loader'\nimport Header from './components/Header'\nimport Explanation from './components/Explanation'\n\nconst App = () => {\n  const[eventData, setEventData] = useState([]);\n  const[loadingState, setLoadingState] = useState(false);\n\n  useEffect(() =>{\n    const fetchData = async () =>{\n      setLoadingState(true);\n      const results = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const {events} = await results.json();\n\n      setEventData(events);\n      setLoadingState(false);\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <Header />\n      {loadingState ? <Loader /> :<Map eventData={eventData}/>}\n      <Explanation />\n    </div>\n  )\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}